name: Deploy to Vercel (staging)

on:
  pull_request:
    types:
      - opened
      - edited
      - reopened
      - synchronize
    branches:
      - 'main'
    paths:
      - '.github/workflows/deploy-vercel-staging.yml'
      - 'cypress/**'
      - '!cypress/_examples/**'
      - '!cypress/integration-storybook/**'
      - '!cypress/config-*.json'
      - 'cypress/config-customer-ci-cd.json'
      - 'public/**'
      - 'scripts/populate-git-env.sh'
      - 'src/**'
      - '!src/stories/**'
      - '.eslint*'
      - '*.js*' # Includes all .js/.json at the root level
      - '*.ts' # Includes all .ts at the root level
      - '.*ignore' # Includes .gitignore and .vercelignore
      - 'yarn.lock'
      - '!**/*.md' # Exclude all markdown files
  workflow_dispatch:
    inputs:
      customer:
        description: 'Customer to deploy'
        required: true

env:
  STAGE: staging

jobs:
  setup-environment:
    name: Setup deployment environment (Ubuntu 18.04 - Node 16.x)
    runs-on: ubuntu-latest
    steps:
      - name: Setup Node.js 16.x
        uses: actions/setup-node@v2
        with:
          node-version: '16'

  start-staging-deployment:
    name: Starts Vercel deployment (staging) (Ubuntu 18.04)
    runs-on: ubuntu-latest
    needs: setup-environment
    timeout-minutes: 40 
    steps:
      - uses: actions/checkout@v1

      - name: Expose GitHub slug/short variables
        uses: rlespinasse/github-slug-action@v3.x

      - name: Resolve customer to deploy
        run: |
          MANUAL_TRIGGER_CUSTOMER="${{github.event.inputs.customer}}"
          echo "MANUAL_TRIGGER_CUSTOMER: " $MANUAL_TRIGGER_CUSTOMER
          echo "MANUAL_TRIGGER_CUSTOMER=$MANUAL_TRIGGER_CUSTOMER" >> $GITHUB_ENV

          CUSTOMER_REF_TO_DEPLOY="${MANUAL_TRIGGER_CUSTOMER:-$(cat vercel.json | jq --raw-output '.build.env.NEXT_PUBLIC_CUSTOMER_REF')}"
          echo "Customer to deploy: " $CUSTOMER_REF_TO_DEPLOY
          echo "CUSTOMER_REF_TO_DEPLOY=$CUSTOMER_REF_TO_DEPLOY" >> $GITHUB_ENV

          if [[ ${GIT_COMMIT_REF##*/} =~ ^v[0-9]{1,}- ]]; then # Checking if pattern matches with "vX-" where X is a number
            BRANCH_ALIAS_DOMAIN=${CUSTOMER_REF_TO_DEPLOY}-${{ env.GITHUB_REF_SLUG }}
          else
            BRANCH_ALIAS_DOMAIN=$(cat deploy/vercel.$CUSTOMER_REF_TO_DEPLOY.staging.json | jq --raw-output '.name')-${{ env.GITHUB_REF_SLUG }}
          fi
          echo "Resolved branch domain alias: " $BRANCH_ALIAS_DOMAIN
          echo "BRANCH_ALIAS_DOMAIN=$BRANCH_ALIAS_DOMAIN" >> $GITHUB_ENV

      - name: Start GitHub deployment
        uses: bobheadxi/deployments@v1.4.0
        id: start-github-deployment
        with:
          step: start
          env: ${{ env.CUSTOMER_REF_TO_DEPLOY }}-${{ env.STAGE }}
          override: false

      - uses: amondnet/vercel-action@v20
        id: vercel-deployment
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }} 
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID}}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID}}

      - name: Link GitHub deployment to Vercel
        uses: bobheadxi/deployments@v1
        id: link-github-deployment-to-vercel
        if: always()
        with:
          step: finish
          env: ${{ env.CUSTOMER_REF_TO_DEPLOY }}-${{ env.STAGE }}
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          deployment_id: ${{ steps.start-github-deployment.outputs.deployment_id }}
          env_url: ${{ steps.vercel-deployment.outputs.preview-url }}

      - name: Finding Pull Request ID
        uses: jwalton/gh-find-current-pr@v1
        id: pr_id_finder
        if: always()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment PR (Deployment failure)
        uses: peter-evans/create-or-update-comment@v1 # See https://github.com/peter-evans/create-or-update-comment
        if: steps.pr_id_finder.outputs.number && failure()
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ steps.pr_id_finder.outputs.number }}
          body: |
            :x:&nbsp; Deployment **FAILED**
            Commit ${{ github.sha }} failed to deploy to [${{ steps.vercel-deployment.outputs.preview-url }}](${{ steps.vercel-deployment.outputs.preview-url }})
            [click to see logs](https://github.com/oter2901/nameless/pull/${{ steps.pr_id_finder.outputs.number }}/checks)

      - name: Comment PR (Deployment success)
        uses: peter-evans/create-or-update-comment@v1
        if: steps.pr_id_finder.outputs.number && success()
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ steps.pr_id_finder.outputs.number }}
          body: |
            :white_check_mark:&nbsp; Deployment **SUCCESS**
            Commit ${{ github.sha }} successfully deployed **Next.js app** :rocket: to [${{ steps.vercel-deployment.outputs.preview-url }}](${{ steps.vercel-deployment.outputs.preview-url }})

      - name: Store variables for next jobs
        uses: UnlyEd/github-action-store-variable@v2.1.1 # See https://github.com/UnlyEd/github-action-store-variable
        with:
          variables: |
            CUSTOMER_REF_TO_DEPLOY=${{ env.CUSTOMER_REF_TO_DEPLOY }}
            VERCEL_DEPLOYMENT_URL=${{ steps.vercel-deployment.outputs.preview-url }}
            VERCEL_DEPLOYMENT_DOMAIN=${{ env.VERCEL_DEPLOYMENT_DOMAIN }}
            MANUAL_TRIGGER_CUSTOMER=${{ env.MANUAL_TRIGGER_CUSTOMER }}
            GITHUB_PULL_REQUEST_ID=${{ steps.pr_id_finder.outputs.number }}
